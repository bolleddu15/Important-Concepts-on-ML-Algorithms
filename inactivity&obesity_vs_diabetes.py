# -*- coding: utf-8 -*-
"""MTH522(inactivity&obesity vs diabetes).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qJJ_RfR7oUnZwGgDifw5mwzAJVh86aK6
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Specify the Excel file path
excel_file_path = '/content/cdc-diabetes-2018.xlsx'
# Using pandas `read_excel` function to read all sheets into a dictionary
all_data = pd.read_excel(excel_file_path, sheet_name=None)
# Access individual DataFrames by sheet name
df1 = all_data['Diabetes']
df2 = all_data['Obesity']
df3 = all_data['Inactivity']

#DATA CREATION
obesity_summary = df2.describe()
obesity_summary =df2.info()
obesity_summary=df2.head(5)
print(obesity_summary)

#DATA CREATION FOR INACTIVITY
inactivity_summary = df3.describe()
inactivity_summary

df1.rename(columns={'STATEW': 'STATE'}, inplace=True)
df3.rename(columns={'FIPDS': 'FIPS'}, inplace=True)
# Inner join df1 and df2 on the 'FIPS' column
merged_df = pd.merge(df1, df2, on='FIPS', how='inner')
# Inner join the result with df3 on the 'FIPS' column
all_common_data = pd.merge(merged_df, df3, on='FIPS', how='inner')
# Prepare the input features (X) and target variable (y)
X = all_common_data[['% OBESE', '% INACTIVE']]
y = all_common_data['% DIABETIC']

# Create a linear regression model %inactivity & %Obesity vs % diabetes
model = LinearRegression()
model.fit(X, y)

# Predict the target variable based on the input features
y_pred = model.predict(X)

# Create a scatter plot of the data points
plt.scatter(y, y_pred)
plt.xlabel('Actual % DIABETIC')
plt.ylabel('Predicted % DIABETIC')
plt.title('Linear Regression: Obesity and Inactivity vs. Diabetes')
plt.grid(True)
# Add the regression line to the plot
plt.plot([min(y), max(y)], [min(y), max(y)], linestyle='--', color='red', linewidth=2, label='Regression Line')
plt.legend()
plt.show()
# Calculate the Mean Squared Error (MSE)
mse = mean_squared_error(y, y_pred)
# Calculate the R-squared value
r2 = r2_score(y, y_pred)
# Print basic statistics, MSE, and R-squared
print("Basic Statistics for Obesity and Inactivity vs. Diabetes:")
print(all_common_data[['% OBESE', '% INACTIVE', '% DIABETIC']].describe())
print("\nMean Squared Error (MSE):", mse)
print("R-squared (R2) Value:", r2)
# Get the coefficients and intercept of the linear regression model
coefficients = model.coef_
intercept = model.intercept_
# Print the coefficients and intercept
print("Coefficients:", coefficients)
print("Intercept:", intercept)

#

## performing cross-validation using k-fold method
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression  # Replace with your desired model

k_val=5
kf = KFold(n_splits=k_val, shuffle=True, random_state=70)
scores = cross_val_score(model, X, y, cv=kf)

print("Cross-validation scores:", scores)
print("Mean accuracy:", np.mean(scores))
print("Standard deviation of accuracy:", np.std(scores))

##Plotting mean of diabetic patients per State
mean_per_state=df1.groupby('STATE')['% DIABETIC'].mean().reset_index()
State=df1['STATE']

mean_state=mean_per_state['STATE']
mean_per_state_diabetic=mean_per_state['% DIABETIC']
plt.figure(figsize=(50,5))
plt.bar(mean_state, mean_per_state_diabetic, width=10,alpha=0.7)
plt.show()

# correlation between column 1 and column2
print(all_common_data['% DIABETIC'].corr(all_common_data['% INACTIVE']))

# Descriptive Statistics for 1370 %diabetes data for which we have %inactivity data.
intersection_of_diabetic_inactivity = pd.merge(df1, df3, on='FIPS', how='inner')
mean_diabetes = intersection_of_diabetic_inactivity['% DIABETIC'].mean()
median_diabetes = intersection_of_diabetic_inactivity['% DIABETIC'].median()
std_dev_diabetics=intersection_of_diabetic_inactivity['% DIABETIC'].std()
kurtosis_diabetics=intersection_of_diabetic_inactivity['% DIABETIC'].kurtosis()
print("mean of diabetes",mean_diabetes)
print("standard deviation of diabetics",std_dev_diabetics)
print("Median Diabetes",median_diabetes)
print("kurtosis of diabetics",kurtosis_diabetics)
print("skewness of diabetics",intersection_of_diabetic_inactivity['% DIABETIC'].skew())

#Plotting Histogram
plt.hist(intersection_of_diabetic_inactivity['% DIABETIC'])
plt.title("Histogram for Diabetes Data for which we have Inactivity Data")
plt.show()

# Descriptive Statistics for 1370 %Inactive data for which we have %Diabetic data.
intersection_of_diabetic_inactivity = pd.merge(df1, df3, on='FIPS', how='inner')
mean_inactivity = intersection_of_diabetic_inactivity['% INACTIVE'].mean()
median_inactivity = intersection_of_diabetic_inactivity['% INACTIVE'].median()
std_dev_inactivity=intersection_of_diabetic_inactivity['% INACTIVE'].std()
kurtosis_inactivity=intersection_of_diabetic_inactivity['% INACTIVE'].kurtosis()
print("mean of inactivity",mean_inactivity)
print("standard deviation of inactivity",std_dev_inactivity)
print("Median inactivity",median_inactivity)
print("kurtosis of inactivity",kurtosis_inactivity)
print("skewness of inactivity",intersection_of_diabetic_inactivity['% INACTIVE'].skew())

#Plotting Histogram
plt.hist(intersection_of_diabetic_inactivity['% INACTIVE'])
plt.title("Histogram for Inactivity Data for which we have Diabetes Data")
plt.show()

import statsmodels.stats.api as sms
import statsmodels.api as sm
from statsmodels.formula.api import ols
import statsmodels.formula.api as smf

model = smf.ols(formula='y ~ X', data=all_common_data)
residual = model.fit()
print(residual.summary())

# Test for heteroscedasticity using the Breusch-Pagan test
bp_lm, bp_lm_pvalue, bp_fvalue, bp_f_pvalue = sm.stats.diagnostic.het_breuschpagan(residual.resid, residual.model.exog)

print("Lagrange multiplier statistic: " + str(bp_lm))
print("Lagrange multiplier p-value:   " + str(bp_lm_pvalue))
print("F-statistic:                   " + str(bp_fvalue))
print("P-value of F-statistic:        " + str(bp_f_pvalue))

if bp_lm_pvalue < 0.05:
    print("Heteroscedasticity detected")
else:
    print("No heteroscedasticity detected")

# Plot fitted values vs. residuals to test for heteroskedasticity
plt.scatter(residual.fittedvalues, residual.resid)
plt.xlabel('Fitted Values')
plt.ylabel('Residuals')
plt.axhline(y = 0, color = 'r')
plt.show()